# Configuration for from
AC_INIT(from.c)

# Versions of autoconf before 2.12 had bugs in autoheader that screwed up
# the production of headers/config.h.in.
AC_PREREQ(2.12)

# Generate <config.h>; note that we use a `header' subdirectory, which
# contains all include files distributed with inetutils, and an `include'
# directory, which holds those actually needed for compilation.
#
# If config.h.in needs to be regenerated (because of changes in configure.in
# or headers/acconfig.h, use the command `autoheader -l headers'.
#
AC_CONFIG_HEADER(config.h)

# config.h turns this on, so make sure it's on for our tests too
CPPFLAGS=-D_BSD_SOURCE

# The list of subdirs that may be built, split into subsets (which the user
# may select for compilation at config or make time); the composite list of
# everything to build by default is defined at the end of this file.
# (These don't contain talk or talkd, which is added later if necessary)

# Optional things we put into libinetutils (we use the name `LIBOBJS' because
# that's what AC_REPLACE_FUNCS uses).
LIBOBJS=''
AC_SUBST(LIBOBJS)

# By default we compile without debug mode.
AC_ARG_ENABLE(debug,
  [  --enable-debug          do with debug])

# By default "mailp" mode and "prmail" mode are enabled.
AC_ARG_ENABLE(mailp,
  [  --disable-mailp         don't use "mailp" mode
  --enable-mailp=mailp_progname
                          invoke "mailp" mode by another name])
AC_ARG_ENABLE(prmail,
  [  --disable-prmail        don't use "prmail" mode
  --enable-prmail=prmail_progname
                          invoke "prmail" mode by another name])

# By default we use no default server.
AC_ARG_ENABLE(default_pop_server,
  [  --enable-default-pop-server=popserver
                          define default POP server])

dnl AC_PROG_MAKE_SET

AC_PROG_CC
AC_PROG_GCC_TRADITIONAL
AC_C_CONST
AC_PROG_INSTALL
dnl AC_PROG_YACC
dnl AC_CHECK_TOOL(AR, ar)
dnl AC_CHECK_TOOL(RANLIB, ranlib, :)
AC_PATH_PROG(RM, rm, rm)
AC_PATH_PROG(MV, mv, mv)
AC_PATH_PROG(LN, ln, ln)

AC_HEADER_STDC
AC_CHECK_FUNCS(strchr memcpy)
AC_CHECK_HEADERS(strings.h arpa/inet.h)

AC_CHECK_FUNC(inet_ntoa, ,
  AC_CHECK_LIB(nsl, inet_ntoa, ,
    AC_MSG_ERROR([Your system is not support inet_ntoa().])))

AC_CHECK_FUNC(socket, ,
  AC_CHECK_LIB(socket, socket, ,
    AC_MSG_ERROR([Your system is not support socket().])))

AC_TYPE_SIGNAL

# Functions that we will define (in libinetutils) if necessary.
AC_REPLACE_FUNCS(strncasecmp)

# Use or not use mailp program
AC_MSG_CHECKING([whether you need mailp extension])
case "${enable_mailp}" in
  yes|'') mailp_progname=mailp ;;
  */*) AC_MSG_ERROR([Don't use / in program name.]) ;;
  no) unset mailp_progname= ;;
  *) mailp_progname="$enable_mailp" ;;
esac
if test -n "${mailp_progname}"; then
  AC_DEFINE_UNQUOTED(PROG_MAILP, "${mailp_progname}")
  AC_MSG_RESULT(as "${mailp_progname}")
else
  AC_MSG_RESULT(no)
fi

# Use or not use prmail program
AC_MSG_CHECKING([whether you need prmail extension])
case "${enable_prmail}" in
  yes|'') prmail_progname=prmail ;;
  */*) AC_MSG_ERROR([Don't use / in program name.]) ;;
  no) unset prmail_progname= ;;
  *) prmail_progname="$enable_prmail" ;;
esac
if test -n "${prmail_progname}"; then
  AC_DEFINE_UNQUOTED(PROG_PRMAIL, "${prmail_progname}")
  AC_MSG_RESULT(as "${prmail_progname}")
else
  AC_MSG_RESULT(no)
fi

# Define default pop server name
AC_MSG_CHECKING([default POP server's name])
case "${enable_default_pop_server}" in
  yes) AC_MSG_ERROR([You must give default POP server's name.]) ;;
  no|'') unset defaultpopserver= ;;
  *) defaultpopserver="$enable_default_pop_server" ;;
esac
if test -n "${defaultpopserver}"; then
  AC_DEFINE_UNQUOTED(DEFAULT_POP_HOST, "${defaultpopserver}")
  AC_MSG_RESULT("${defaultpopserver}")
else
  AC_MSG_RESULT([not given])
  AC_MSG_WARN([You must give server's name on each execution, OK?])
fi

TARGET_ALIASES="${mailp_progname} ${prmail_progname}"
AC_SUBST(TARGET_ALIASES)

if test "${enable_debug}" = "yes"; then
  AC_DEFINE(DEBUG, 1)
fi

AC_OUTPUT(Makefile)
