/* config.h.in.  Generated automatically from configure.in by autoheader.  */

/* Define to empty if the keyword does not work.  */
#undef const

/* Define as the return type of signal handlers (int or void).  */
#undef RETSIGTYPE

/* Define if you have the ANSI C header files.  */
#undef STDC_HEADERS

/* program name for mail check */
#undef PROG_MAILP

/* program name for mail check */
#undef PROG_PRMAIL

/* default mail server name */
#undef DEFAULT_POP_HOST

/* debug mode flag */
#undef DEBUG

/* Define if you have the memcpy function.  */
#undef HAVE_MEMCPY

/* Define if you have the strchr function.  */
#undef HAVE_STRCHR

/* Define if you have the strncasecmp function.  */
#undef HAVE_STRNCASECMP

/* Define if you have the <arpa/inet.h> header file.  */
#undef HAVE_ARPA_INET_H

/* Define if you have the <strings.h> header file.  */
#undef HAVE_STRINGS_H

/* Define if you have the nsl library (-lnsl).  */
#undef HAVE_LIBNSL

/* Define if you have the socket library (-lsocket).  */
#undef HAVE_LIBSOCKET
#if STDC_HEADERS
# include <string.h>
#else
# ifndef HAVE_STRCHR
#  define strchr index
#  define strrchr rindex
# endif
char *strchr (), *strrchr ();
# ifndef HAVE_MEMCPY
#  define memcpy(d, s, n) bcopy ((s), (d), (n))
#  define memmove(d, s, n) bcopy ((s), (d), (n))
# endif
#endif

#ifndef HAVE_STRNCASECMP
int strncasecmp(const char *str1, const char *str2, int len);
#endif /* HAVE_STRNCASECMP */

int ruserpass(char *host, char **aname, char **apass);
